SpringMVC的HelloWorld
    1.添加依赖
        commons-logging-1.2.jar
        spring-aop-5.1.8.RELEASE.jar
        spring-beans-5.1.8.RELEASE.jar
        spring-context-5.1.8.RELEASE.jar
        spring-core-5.1.8.RELEASE.jar
        spring-expression-5.1.8.RELEASE.jar
        spring-web-5.1.8.RELEASE.jar
        spring-webmvc-5.1.8.RELEASE.jar
    2.创建SpringMVC的配置文件：spring-mvc.xml
        配置视图解析器
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/views/"/>
                <property name="suffix" value=".jsp"/>
            </bean>
        配置扫描组件
            <context:component-scan base-package="com.oaec.springmvc"/>
    3.在web.xml配置请求分配器：
            <servlet>
                <servlet-name>dispatcherServlet</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <!--配置SpringMVC配置文件的路径-->
                <init-param>
                    <param-name>contextConfigLocation</param-name>
                    <param-value>classpath:spring-mvc.xml</param-value>
                </init-param>
                <!--在Web容器启动时完成初始化-->
                <load-on-startup>1</load-on-startup>
            </servlet>
            <servlet-mapping>
                <servlet-name>dispatcherServlet</servlet-name>
                <url-pattern>/</url-pattern>
            </servlet-mapping>

    4.向request作用域存储数据
        1.使用Map
            @RequestMapping("/hello")
            public String hello(String name, Map<String,Object> map){
                System.out.println("name = [" + name + "]");
                //将请求参数name，存储在request作用域
                map.put("name",name);
                return "hello";
            }
        2.使用Model
            @RequestMapping("/hello")
            public String hello(String name, Model model){
                System.out.println("name = [" + name + "]");
                //将请求参数name，存储在request作用域
                model.addAttribute("name",name);
                return "hello";
            }
        3.使用ModelAndView
            @RequestMapping("/hello")
            public ModelAndView hello(String name){
                System.out.println("name = [" + name + "]");
                //将请求参数name，存储在request作用域
                ModelAndView modelAndView = new ModelAndView();
                modelAndView.setViewName("hello");
                modelAndView.addObject("name",name);
                return modelAndView;
            }
        4.使用HttpServletRequest
            @RequestMapping("/hello")
            public String hello(String name, HttpServletRequest request){
                System.out.println("name = [" + name + "]");
                //将请求参数name，存储在request作用域
                request.setAttribute("name",name);
                return "hello";
            }